diff --git a/DataFiles/mirkwood.json b/DataFiles/mirkwood.json
index b416b7e..2043e61 100644
--- a/DataFiles/mirkwood.json
+++ b/DataFiles/mirkwood.json
@@ -221,6 +221,11 @@
     },
     {
       "id": 8801,
+      "abilities": {
+        "minDamage": "3",
+        "maxDamage": "5",
+        "equipSlot": "hands"
+      },
       "keywords": [
         "sword"
       ],
@@ -232,6 +237,9 @@
     },
     {
       "id": 8802,
+      "abilities": {
+
+      },
       "keywords": [
         "cloak"
       ],
@@ -243,6 +251,9 @@
     },
     {
       "id": 8803,
+      "abilities": {
+
+      },
       "keywords": [
         "boots"
       ],
@@ -254,6 +265,9 @@
     },
     {
       "id": 8804,
+      "abilities": {
+
+      },
       "keywords": [
         "water",
         "flask"
@@ -266,6 +280,9 @@
     },
     {
       "id": 8805,
+      "abilities": {
+
+      },
       "keywords": [
         "shield"
       ],
@@ -277,6 +294,11 @@
     },
     {
       "id": 8806,
+      "abilities": {
+          "minDamage": "2",
+          "maxDamage": "5",
+          "equipSlot": "hands"
+      },
       "keywords": [
         "scimitar"
       ],
@@ -288,6 +310,9 @@
     },
     {
       "id": 8807,
+      "abilities": {
+
+      },
       "keywords": [
         "helm"
       ],
@@ -299,6 +324,9 @@
     },
     {
       "id": 8808,
+      "abilities": {
+
+      },
       "keywords": [
         "flask",
         "wine"
@@ -311,6 +339,9 @@
     },
     {
       "id": 8809,
+      "abilities": {
+
+      },
       "keywords": [
         "barrel",
         "wine"
@@ -323,6 +354,9 @@
     },
     {
       "id": 8810,
+      "abilities": {
+
+      },
       "keywords": [
         "barrel"
       ],
@@ -334,6 +368,9 @@
     },
     {
       "id": 8811,
+      "abilities": {
+
+      },
       "keywords": [
         "sword"
       ],
@@ -345,6 +382,9 @@
     },
     {
       "id": 8812,
+      "abilities": {
+
+      },
       "keywords": [
         "key"
       ],
@@ -356,6 +396,9 @@
     },
     {
       "id": 8813,
+      "abilities": {
+
+      },
       "keywords": [
         "key"
       ],
diff --git a/lib/Character/include/Character.h b/lib/Character/include/Character.h
index c7701ec..8ac9916 100644
--- a/lib/Character/include/Character.h
+++ b/lib/Character/include/Character.h
@@ -26,7 +26,7 @@ public:
 
     void setRoomID(ID roomID);
 
-    Object getItemFromInventoryByName(Name objectName);
+    Object getItemFromInventoryByName(Name objType);
 
     /*
      * Checks to see if character has the item in question
@@ -44,13 +44,13 @@ public:
      *
      * Post-Condition: Returns true if item exists in inventory
     */
-    bool hasItemByName(Name objectName);
+    bool hasItemByName(Name objType);
 
     auto getWearingIteratorByID(ID objectId);
 
     bool isWearing(ID objectId);
 
-    bool isWearingByName(Name objectName);
+    bool isWearingByName(Name objType);
 
     bool wear(Object obj);
 
diff --git a/lib/Character/src/Character.cpp b/lib/Character/src/Character.cpp
index dba0388..5d87025 100644
--- a/lib/Character/src/Character.cpp
+++ b/lib/Character/src/Character.cpp
@@ -25,8 +25,8 @@ ID Character::getCharacterID() const {
     return characterID;
 }
 
-Object Character::getItemFromInventoryByName(Name objectName) {
-    return inventory.getItemByName(objectName); 
+Object Character::getItemFromInventoryByName(Name objType) {
+    return inventory.getItemByType(objType);
 }
 
 bool Character::addItemToInventory(Object obj) {
@@ -41,8 +41,8 @@ bool Character::hasItem(ID objectId) {
     return inventory.doesItemExist(objectId);
 }
 
-bool Character::hasItemByName(Name objectName) {
-    return inventory.doesItemExistByName(objectName);
+bool Character::hasItemByName(Name objType) {
+    return inventory.doesItemExistByName(objType);
 }
 
 auto Character::getWearingIteratorByID(ID objectId) {
@@ -61,14 +61,14 @@ bool Character::isWearing(ID objectId) {
     return getWearingIteratorByID(objectId) != wearing.end();
 }
 
-bool Character::isWearingByName(Name objectName) {
-    if (hasItemByName(objectName) == false) {
-        return hasItemByName(objectName);
+bool Character::isWearingByName(Name objType) {
+    if (hasItemByName(objType) == false) {
+        return hasItemByName(objType);
     }
 
     auto it = find_if(wearing.begin(), wearing.end(),
-                      [ objectName ] ( Object const& obj )->bool {
-                          return obj.getName() == objectName;
+                      [ objType ] ( Object const& obj )->bool {
+                          return obj.getName() == objType;
                         });
 
     return !(it == wearing.end());
@@ -98,16 +98,3 @@ bool Character::dropItem(ID objectId) {
 std::string Character::listInventory() {
     return inventory.listInventory();
 }
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/lib/Controllers/include/ObjectController.h b/lib/Controllers/include/ObjectController.h
index 2e10942..d296ce3 100644
--- a/lib/Controllers/include/ObjectController.h
+++ b/lib/Controllers/include/ObjectController.h
@@ -31,7 +31,7 @@ public:
      * Post: returns true if object exists
      *
      * */
-    bool doesObjectExist(const Name &objectName);
+    bool doesObjectExist(const Name &objType);
 
     /* Get Object By Name:
      *
@@ -41,7 +41,7 @@ public:
      * Post: returns the object
      *
      * */
-    const Object &getObjectFromListByName(const Name &objectName) const;
+    const Object &getObjectFromListByName(const Name &objType) const;
 };
 
 #endif //ALTERSPACE_OBJECTCONTROLLER_H
diff --git a/lib/Controllers/src/ObjectController.cpp b/lib/Controllers/src/ObjectController.cpp
index 5f4ee4f..7df5dc8 100644
--- a/lib/Controllers/src/ObjectController.cpp
+++ b/lib/Controllers/src/ObjectController.cpp
@@ -5,10 +5,10 @@ ObjectController::ObjectController(){
     objects.insert( {"Basic Armor", Object(200,"Basic Armor")} );
 };
 
-bool ObjectController::doesObjectExist(const Name &objectName) {
-    return objects.find(objectName) != objects.end();
+bool ObjectController::doesObjectExist(const Name &objType) {
+    return objects.find(objType) != objects.end();
 }
 
-const Object &ObjectController::getObjectFromListByName(const Name &objectName) const {
-    return objects.find(objectName)->second;
+const Object &ObjectController::getObjectFromListByName(const Name &objType) const {
+    return objects.find(objType)->second;
 }
diff --git a/lib/Object/CMakeLists.txt b/lib/Object/CMakeLists.txt
index cc1e6fe..ef2065b 100644
--- a/lib/Object/CMakeLists.txt
+++ b/lib/Object/CMakeLists.txt
@@ -41,6 +41,7 @@ target_link_libraries(Object
 target_link_libraries(Inventory
         PUBLIC
                 Object
+                jsonObjects
         )
 
 install(TARGETS Object
@@ -53,4 +54,4 @@ install(TARGETS Inventory
 
 install(TARGETS test_object
         RUNTIME DESTINATION lib
-        )
\ No newline at end of file
+        )
diff --git a/lib/Object/include/Inventory.h b/lib/Object/include/Inventory.h
index 8eb8188..6bb3bed 100644
--- a/lib/Object/include/Inventory.h
+++ b/lib/Object/include/Inventory.h
@@ -5,6 +5,7 @@
 #include <string>
 
 #include <AlterSpace.h>
+#include <JSONObjects.h>
 #include "Object.h"
 
 using AlterSpace::ID;
@@ -13,12 +14,13 @@ class Inventory {
 private:
     std::vector<Object> objects;
 
-    auto getItemIteratorByID(ID objectID);
+    auto getItemIteratorByID(ID objID);
 
-    auto getItemIteratorByName(Name objectName);
+    auto getItemIteratorByName(Name objType);
 
 public:
-    Inventory();
+
+    Inventory::Inventory() = default;
 
     /* Add Item:
      *
@@ -38,7 +40,7 @@ public:
      * Post: returns true if found
      *
      * */
-    bool doesItemExist(ID objectID);
+    bool doesItemExist(ID objID);
 
     /* Does Item Exist By Name:
      *
@@ -48,7 +50,7 @@ public:
      * Post: returns true if found
      *
      * */
-    bool doesItemExistByName(Name objectName);
+    bool doesItemExistByName(Name objType);
 
     /* Get Item By Name:
      *
@@ -58,7 +60,7 @@ public:
      * Post: returns item if found
      *
      * */
-    Object getItemByName(Name objectName);
+    Object getItemByType(Name objType);
 
     /* Remove Item:
      *
@@ -68,7 +70,7 @@ public:
      * Post: Removes the item from the inventory, returns true if removed successfully
      *
      * */
-    bool removeItem(ID objectID);
+    bool removeItem(ID objID);
 
     /* List Inventory:
      *
diff --git a/lib/Object/include/Object.h b/lib/Object/include/Object.h
index 6dc0096..e8eb549 100644
--- a/lib/Object/include/Object.h
+++ b/lib/Object/include/Object.h
@@ -11,8 +11,9 @@ using AlterSpace::Name;
 
 class Object {
 private:
-    ID objectID;
-    Name objectName;
+    ID objID;
+    Name objType;
+    std::unordered_map<Trigger, Effect> abilities;
     std::vector<std::string> keywords;
     std::string shortdesc;
     std::vector<std::string> longdesc;
@@ -23,31 +24,35 @@ private:
     };
     extraDescription extra;
 
-
 public:
 	Object();
-	
-    Object(ID objectID, const Name &objectName) : objectID(objectID), objectName(objectName) {}
+
+    Object(ID objID, const Name &objType) : objID(objID), objType(objType) {}
 
     //Struct not working with this constructor
-//    Object(ID objectID,std::vector<std::string> keywords , std::string shortdesc,std::vector<std::string> longdesc,std::vector<std::string> extraKeywords, std::vector<std::string> extraDesc)
-//    : objectID(objectID),keywords(keywords),shortdesc(shortdesc),longdesc(longdesc), extra(extraKeywords),extraDescription(extraDesc){}
+//    Object(ID objID,std::vector<std::string> keywords , std::string shortdesc,std::vector<std::string> longdesc,std::vector<std::string> extraKeywords, std::vector<std::string> extraDesc)
+//    : objID(objID),keywords(keywords),shortdesc(shortdesc),longdesc(longdesc), extra(extraKeywords),extraDescription(extraDesc){}
 
-    Object(ID objectID, std::vector<std::string> keywords, std::string shortdesc, std::vector<std::string> longdesc,
+    Object(ID objID, Name objType, std::unordered_map<Trigger, Effect> abilities, std::vector<std::string> keywords, std::string shortdesc, std::vector<std::string> longdesc,
            std::vector<std::string> extraKeywords, std::vector<std::string> extraDesc) {
-        this->objectID = objectID;
+        this->objID = objID;
+        this->objType = objType;
+        this->abilities = abilities;
         this->keywords = keywords;
         this->shortdesc = shortdesc;
         this->longdesc = longdesc;
         this->extra.keywords = extraKeywords;
         this->extra.desc = extraDesc;
-
     }
 
-    const Name &getName() const;
-
     ID getID() const;
 
+    Name &getType() const;
+
+    std::unordered_map<Trigger, Effect> getAbilities() {
+      return abilities;
+    }
+
     std::vector<std::string> getKeywords() {
         return keywords;
     }
@@ -71,4 +76,4 @@ public:
 };
 
 
-#endif //ALTERSPACE_OBJECT_H
\ No newline at end of file
+#endif //ALTERSPACE_OBJECT_H
diff --git a/lib/Object/src/Inventory.cpp b/lib/Object/src/Inventory.cpp
index e049c53..de880be 100644
--- a/lib/Object/src/Inventory.cpp
+++ b/lib/Object/src/Inventory.cpp
@@ -1,66 +1,60 @@
 #include <algorithm>
 #include <Inventory.h>
+#include <JSONObjects.h>
 
-Inventory::Inventory() = default;
-
-void Inventory::addItem(Object object)
-{
+void Inventory::addItem(Object object) {
     objects.push_back(object);
 }
 
-auto Inventory::getItemIteratorByID(ID objectID)
-{
+auto Inventory::getItemIteratorByID(ID objID) {
     auto it = find_if(objects.begin(), objects.end(),
-                      [ objectID ] ( Object const& obj )->bool {
-                          return obj.getID() == objectID;
+                      [ objID ] ( Object const& obj )->bool {
+                          return obj.getID() == objID;
                         });
 
-    return it;    
+    return it;
 }
 
-bool Inventory::doesItemExist(ID objectID)
-{
-    
-    return getItemIteratorByID(objectID) != objects.end();
+bool Inventory::doesItemExist(ID objID) {
+
+    return getItemIteratorByID(objID) != objects.end();
 }
 
-auto Inventory::getItemIteratorByName(Name objectName)
-{
+auto Inventory::getItemIteratorByName(Name objType) {
     auto it = find_if(objects.begin(), objects.end(),
-                      [ objectName ] ( Object const& obj )->bool {
-                          return obj.getName() == objectName;
+                      [ objType ] ( Object const& obj )->bool {
+                          return obj.getName() == objType;
                         });
 
     return it;
 }
 
-bool Inventory::doesItemExistByName(Name objectName)
-{
-    
-    return getItemIteratorByName(objectName) != objects.end();
+bool Inventory::doesItemExistByName(Name objType) {
+
+    return getItemIteratorByName(objType) != objects.end();
 }
 
-Object Inventory::getItemByName(Name objectName)
+Object Inventory::getItemByType(Name objType)
 {
 
-    if (doesItemExistByName(objectName) == false)
+    if (doesItemExistByName(objType) == false)
     {
         return Object();
     }
 
-    auto it = getItemIteratorByName(objectName);
+    auto it = getItemIteratorByName(objType);
 
     return *it;
 }
 
-bool Inventory::removeItem(ID objectID)
+bool Inventory::removeItem(ID objID)
 {
-    auto it = getItemIteratorByID(objectID);
+    auto it = getItemIteratorByID(objID);
 
     if (it != objects.end())
     {
         it = objects.erase(it);
-        return (doesItemExist(objectID) == false);
+        return (doesItemExist(objID) == false);
     }
     return false;
 }
@@ -71,6 +65,9 @@ std::string Inventory::listInventory()
         return std::string();
     }
 
+
+    /////
+
     int objectCount = 1;
     std::string inventoryList;
 
diff --git a/lib/Object/src/Object.cpp b/lib/Object/src/Object.cpp
index 698d66d..c9577ef 100644
--- a/lib/Object/src/Object.cpp
+++ b/lib/Object/src/Object.cpp
@@ -2,10 +2,10 @@
 
 Object::Object() = default;
 
-const Name& Object::getName() const {
-    return this->objectName;
+ID Object::getID() const {
+    return this->objType;
 }
 
-ID Object::getID() const {
-    return this->objectID;
+const Name& Object::getType() const {
+    return this->objType;
 }
diff --git a/lib/Object/src/test_object.cpp b/lib/Object/src/test_object.cpp
index 8ba25e2..f49c8c4 100644
--- a/lib/Object/src/test_object.cpp
+++ b/lib/Object/src/test_object.cpp
@@ -6,9 +6,9 @@
 #include <iostream>
 #include <Object.h>
 
-int main(int argc, char** argv){
+int main(int argc, char** argv) {
     //std::cout << "hello world" << std::endl;
     std::string testName = "item01";
     Object object(0, testName);
     return 0;
-}
\ No newline at end of file
+}
diff --git a/lib/User/include/UserController.h b/lib/User/include/UserController.h
index 85fbc62..1d08e7c 100644
--- a/lib/User/include/UserController.h
+++ b/lib/User/include/UserController.h
@@ -39,7 +39,7 @@ public:
 
     /* if username exists and isn't logged in already, logs them in and returns the outcome
      *
-     * Pre-Condition: username as const reference Name type, password as string and a const Connection object
+     * Pre-Condition: username as const reference Name objType, password as string and a const Connection object
      *
      * Post-Condition: a struct of username and a login result
      */
@@ -49,7 +49,7 @@ public:
 	/*
      * if no such username exists already, creates a user with such username and password
      *
-     * Pre-Condition: username as const reference Name type, password as string and a const Connection object
+     * Pre-Condition: username as const reference Name objType, password as string and a const Connection object
      *
      * Post-Condition: a struct of username and a user creation result
 	*/
@@ -58,7 +58,7 @@ public:
 	/*
      * logs out a username by deleting it from the map of activeUsers
      *
-     * Pre-Condition: username as const reference Name type
+     * Pre-Condition: username as const reference Name objType
      *
      * Post-Condition: a struct of username and a logout result
 	*/
@@ -80,7 +80,7 @@ private:
      * If a user is already logged in with such username or if the password is inaccurate, login fails
      * Password passed in is hashed for security
      *
-     * Pre-Condition: username as const reference Name type, password as string
+     * Pre-Condition: username as const reference Name objType, password as string
      *
      * Post-Condition: a result value of whether a user is found and validated successfully
 	*/
@@ -93,7 +93,7 @@ private:
 	 * creates a file to store the login information for the future
 	 * password is hashed for security before being stored
      *
-     * Pre-Condition: username as const reference Name type, password as string
+     * Pre-Condition: username as const reference Name objType, password as string
      *
      * Post-Condition: a result value of whether a new user is created succesfully
 	*/
diff --git a/lib/Utility/CMakeLists.txt b/lib/Utility/CMakeLists.txt
index 3b20026..8123d0c 100644
--- a/lib/Utility/CMakeLists.txt
+++ b/lib/Utility/CMakeLists.txt
@@ -4,6 +4,7 @@ add_library(utility
         include/Utility.h
         include/AlterSpace.h
         include/JSONUser.h
+        include/JSONObjects.h
         )
 
 add_library(returnCode
@@ -97,4 +98,4 @@ install(TARGETS jsonUser
 
 install(TARGETS jsonObjects
         ARCHIVE DESTINATION lib
-        )
\ No newline at end of file
+        )
diff --git a/lib/Utility/include/AlterSpace.h b/lib/Utility/include/AlterSpace.h
index 0e5118a..772e0d3 100644
--- a/lib/Utility/include/AlterSpace.h
+++ b/lib/Utility/include/AlterSpace.h
@@ -11,6 +11,8 @@ namespace AlterSpace
     using Input     = std::string;
     using Name      = std::string;
     using Password  = std::string;
+    using Trigger   = std::string;
+    using Effect    = std::string;
 }
 
 
diff --git a/lib/Utility/include/JSONObjects.h b/lib/Utility/include/JSONObjects.h
index ea7d916..43c5a03 100644
--- a/lib/Utility/include/JSONObjects.h
+++ b/lib/Utility/include/JSONObjects.h
@@ -6,6 +6,7 @@
 
 #ifndef ALTERSPACE_JSONOBJECTS_H
 #define ALTERSPACE_JSONOBJECTS_H
+
 namespace JSONObjects {
 
     using json = nlohmann::json;
@@ -25,58 +26,113 @@ namespace JSONObjects {
         return j;
     }
 
-    static bool doesFileExist(const std::string &name) {
+    static bool fileExists(const std::string &name) {
         std::string fileName = FILE_PATH + name + EXTENSION;
         std::ifstream f(fileName);
         return f.good();
     }
 
-    std::vector<std::string> getArray(int i, json j, std::string arrayName) {
-        std::vector<std::string> vec;
-        int size = j[i][arrayName].size();
-
-        for (unsigned int k = 0; k < size; k++) {
-            vec.push_back(j[i][arrayName][k]);
+    /*
+     * Read in a list of values for an item's specified property
+     *
+     * Pre-Condition: Name of desired property, and an indexes for where to retrieve its values from JSON
+     *
+     * Post-Condition: Returns a list of property values
+    */
+    std::vector<std::string> getArray(int iObj, json j, std::string property) {
+        std::vector<std::string> values;
+        int numValues = j[iObj][property].size();
+
+        for (unsigned int i = 0; i < numValues; i++) {
+            values.push_back(j[iObj][property][i]);
         }
 
-        return vec;
+        return values;
     }
 
-    std::vector<std::string> getNestedStringArray(int i, json j, std::string obj, std::string field) {
-        std::vector<std::string> vec;
-        int size = j[i][obj].size();
-
-        for (unsigned int k = 0; k < size; k++) {
-            int size2 = j[i][obj][k][field].size();
+    /*
+     * Read in a list of key-value pairs for an item's specified property
+     *
+     * Pre-Condition: Name of desired property, and an indexes for where to retrieve its values from JSON
+     *
+     * Post-Condition: Returns a list of key-value pairs
+    */
+    std::unordered_map<std::string, std::string> getPairs(int iObj, json j, std::string property) {
+        std::unordered_map<std::string, std::string> pairs;
+        int numPairs = j[iObj][property].size();
+
+        for (auto pair : j[iObj][property].items()) {
+            pairs.insert(std::pair<std::string, std::string>(pair.key(), pair.value()));
+        }
+    }
 
-            for (unsigned int k2 = 0; k2 < size2; k2++) {
-                vec.push_back(j[i][obj][k][field][k2].get<std::string>());
+    /*
+     * Read in a list of values for an item's specified property
+     *
+     * Pre-Condition: Name of desired (nested) property, and an indexes for where to retrieve its values from JSON
+     *
+     * Post-Condition: Returns a list of property values
+    */
+    std::vector<std::string> getNestedArray(int iObj, json j, std::string property, std::string subproperty) {
+        std::vector<std::string> values;
+        int sizeArr = j[iObj][property].size();
+
+        for (unsigned int iArr = 0; iArr < sizeArr; iArr++) {
+            int sizeSubarray = j[iObj][property][iArr][subproperty].size();
+
+            for (unsigned int iSubarr = 0; iSubarr < sizeSubarray; iSubarr++) {
+                values.push_back(j[iObj][property][iArr][subproperty][iSubarr].get<std::string>());
             }
         }
+        return values;
+    }
 
-        return vec;
+    /*
+     * Concatenate strings from an array
+     *
+     * Pre-Condition: Name of desired property, and an indexes for where to retrieve its values from JSON
+     *
+     * Post-Condition: Returns a string of property values
+    */
+    std::string getStrFromArray(int iObj, json j, std::string property) {
+        std::string combinedStr = std::string();
+        int numValues = j[iObj][property].size();
+
+        for (unsigned int i = 0; i < numValues; i++) {
+            combinedStr += j[iObj][property][i];
+        }
+        return combinedStr;
     }
 
+    /*
+     * Read in a list of objects from a specified JSON file
+     *
+     * Pre-Condition: Name of file to parse
+     *
+     * Post-Condition: Returns a list of objects
+    */
     static std::vector<Object> getObjects(const std::string &name) {
         json j = setupRead(name);
-        std::vector<Object> vec;
+        std::vector<Object> objects;
 
-        int size = j["OBJECTS"].size();
+        int numObjects = j["OBJECTS"].size();
         j = j["OBJECTS"];
 
-        for (unsigned int i = 0; i < size; i++) {
+        for (unsigned int i = 0; i < numObjects; i++) {
             Object obj(j[i]["id"].get<unsigned int>(),
+                       getStrFromArray(i, j, "keywords"),
+                       getPairs(i, j, "abilities"),
                        getArray(i, j, "keywords"),
                        j[i]["shortdesc"],
                        getArray(i, j, "longdesc"),
                        getNestedStringArray(i, j, "extra", "keywords"),
                        getNestedStringArray(i, j, "extra", "desc"));
 
-            vec.push_back(obj);
+            objects.push_back(obj);
         }
 
-        return vec;
+        return objects;
     }
 
 }
-#endif //ALTERSPACE_JSONOBJECTS_H
\ No newline at end of file
+#endif //ALTERSPACE_JSONOBJECTS_H
diff --git a/patch.txt b/patch.txt
index 5c78238..fa68212 100644
--- a/patch.txt
+++ b/patch.txt
@@ -1,24 +0,0 @@
-diff --git a/lib/Object/include/Inventory.h b/lib/Object/include/Inventory.h
-index 7ba25a5..e21e99b 100644
---- a/lib/Object/include/Inventory.h
-+++ b/lib/Object/include/Inventory.h
-@@ -30,8 +30,8 @@ public:
-      *
-      * Function: Checks to see if user has such the item
-      *
--     * Pre-Condition: ID of the item in question
--     * Post:returns true if found
-+     * Pre-Condition: ID of the item to validate
-+     * Post: returns true if found
-      *
-      * */
-     bool doesItemExist(ID objectID);
-@@ -40,7 +40,7 @@ public:
-      *
-      * Function: removes item from inventory
-      *
--     * Pre-Condition: the ID of the item in question
-+     * Pre-Condition: ID of the item to remove
-      * Post: will have removed the item from the inventory, returns true if removed
-      *
-      * */
\ No newline at end of file
diff --git a/third-party/web-socket-networking b/third-party/web-socket-networking
index a793d79..1d2a7e4 160000
--- a/third-party/web-socket-networking
+++ b/third-party/web-socket-networking
@@ -1 +1 @@
-Subproject commit a793d7956c5e3aff9585a2c84f924a96df4d7317
+Subproject commit 1d2a7e4015ecaa4b2f9ecf8582d85c97e46923a2
diff --git a/tools/chatserver/chatserver.cpp b/tools/chatserver/chatserver.cpp
index 6c4ffc6..d37cbe1 100644
--- a/tools/chatserver/chatserver.cpp
+++ b/tools/chatserver/chatserver.cpp
@@ -187,7 +187,7 @@ main(int argc, char *argv[]) {
 
     std::string fileName = "mirkwood";
 
-    if (JSONObjects::doesFileExist(fileName)) {
+    if (JSONObjects::fileExists(fileName)) {
         cout << "file exists\n";
     } else {
         cout << "error, no such file\n";
@@ -198,6 +198,13 @@ main(int argc, char *argv[]) {
     for (auto &obj : objects) {
         std::cout << "ID: " << obj.getID() << std::endl;
 
+        std::cout << "Type: " << obj.getType() << std::endl;
+
+        std::cout << "Abilities: " std::endl;
+        for (auto &a : obj.getAbilities()) {
+          std::cout << "\t" << a.first << ", " << a.second << std::endl;
+        }
+
         std::cout << " Keywords: " << std::endl;
         for (auto &kw : obj.getKeywords()) {
             std::cout << "\t" << kw << std::endl;
@@ -236,4 +243,4 @@ main(int argc, char *argv[]) {
     game->run();
 
     return 0;
-}
\ No newline at end of file
+}
