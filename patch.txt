diff --git a/lib/Character/include/Character.h b/lib/Character/include/Character.h
index 8ac9916..c7701ec 100644
--- a/lib/Character/include/Character.h
+++ b/lib/Character/include/Character.h
@@ -26,7 +26,7 @@ public:
 
     void setRoomID(ID roomID);
 
-    Object getItemFromInventoryByName(Name objType);
+    Object getItemFromInventoryByName(Name objectName);
 
     /*
      * Checks to see if character has the item in question
@@ -44,13 +44,13 @@ public:
      *
      * Post-Condition: Returns true if item exists in inventory
     */
-    bool hasItemByName(Name objType);
+    bool hasItemByName(Name objectName);
 
     auto getWearingIteratorByID(ID objectId);
 
     bool isWearing(ID objectId);
 
-    bool isWearingByName(Name objType);
+    bool isWearingByName(Name objectName);
 
     bool wear(Object obj);
 
diff --git a/lib/Character/src/Character.cpp b/lib/Character/src/Character.cpp
index 939d729..2f2e034 100644
--- a/lib/Character/src/Character.cpp
+++ b/lib/Character/src/Character.cpp
@@ -25,8 +25,8 @@ ID Character::getCharacterID() const {
     return characterID;
 }
 
-Object Character::getItemFromInventoryByName(Name objType) {
-    return inventory.getItemByType(objType);
+Object Character::getItemFromInventoryByName(Name objectName) {
+    return inventory.getItemByType(objectName);
 }
 
 bool Character::addItemToInventory(Object obj) {
@@ -41,8 +41,8 @@ bool Character::hasItem(ID objectId) {
     return inventory.doesItemExist(objectId);
 }
 
-bool Character::hasItemByName(Name objType) {
-    return inventory.doesItemExistByName(objType);
+bool Character::hasItemByName(Name objectName) {
+    return inventory.doesItemExistByName(objectName);
 }
 
 auto Character::getWearingIteratorByID(ID objectId) {
@@ -61,14 +61,14 @@ bool Character::isWearing(ID objectId) {
     return getWearingIteratorByID(objectId) != wearing.end();
 }
 
-bool Character::isWearingByName(Name objType) {
-    if (hasItemByName(objType) == false) {
-        return hasItemByName(objType);
+bool Character::isWearingByName(Name objectName) {
+    if (hasItemByName(objectName) == false) {
+        return hasItemByName(objectName);
     }
 
     auto it = find_if(wearing.begin(), wearing.end(),
-                      [ objType ] ( Object const& obj )->bool {
-                          return obj.getName() == objType;
+                      [ objectName ] ( Object const& obj )->bool {
+                          return obj.getName() == objectName;
                         });
 
     return !(it == wearing.end());
diff --git a/lib/Controllers/include/ObjectController.h b/lib/Controllers/include/ObjectController.h
index d296ce3..2e10942 100644
--- a/lib/Controllers/include/ObjectController.h
+++ b/lib/Controllers/include/ObjectController.h
@@ -31,7 +31,7 @@ public:
      * Post: returns true if object exists
      *
      * */
-    bool doesObjectExist(const Name &objType);
+    bool doesObjectExist(const Name &objectName);
 
     /* Get Object By Name:
      *
@@ -41,7 +41,7 @@ public:
      * Post: returns the object
      *
      * */
-    const Object &getObjectFromListByName(const Name &objType) const;
+    const Object &getObjectFromListByName(const Name &objectName) const;
 };
 
 #endif //ALTERSPACE_OBJECTCONTROLLER_H
diff --git a/lib/Controllers/src/ObjectController.cpp b/lib/Controllers/src/ObjectController.cpp
index 7df5dc8..5f4ee4f 100644
--- a/lib/Controllers/src/ObjectController.cpp
+++ b/lib/Controllers/src/ObjectController.cpp
@@ -5,10 +5,10 @@ ObjectController::ObjectController(){
     objects.insert( {"Basic Armor", Object(200,"Basic Armor")} );
 };
 
-bool ObjectController::doesObjectExist(const Name &objType) {
-    return objects.find(objType) != objects.end();
+bool ObjectController::doesObjectExist(const Name &objectName) {
+    return objects.find(objectName) != objects.end();
 }
 
-const Object &ObjectController::getObjectFromListByName(const Name &objType) const {
-    return objects.find(objType)->second;
+const Object &ObjectController::getObjectFromListByName(const Name &objectName) const {
+    return objects.find(objectName)->second;
 }
diff --git a/lib/Object/include/Inventory.h b/lib/Object/include/Inventory.h
index 3f68016..1fa513a 100644
--- a/lib/Object/include/Inventory.h
+++ b/lib/Object/include/Inventory.h
@@ -14,9 +14,9 @@ class Inventory {
 private:
     std::vector<Object> objects;
 
-    auto getItemIteratorByID(ID objID);
+    auto getItemIteratorByID(ID objectID);
 
-    auto getItemIteratorByName(Name objType);
+    auto getItemIteratorByName(Name objectName);
 
 public:
 
@@ -40,7 +40,7 @@ public:
      * Post: returns true if found
      *
      * */
-    bool doesItemExist(ID objID);
+    bool doesItemExist(ID objectID);
 
     /* Does Item Exist By Name:
      *
@@ -50,7 +50,7 @@ public:
      * Post: returns true if found
      *
      * */
-    bool doesItemExistByName(Name objType);
+    bool doesItemExistByName(Name objectName);
 
     /* Get Item By Name:
      *
@@ -60,7 +60,7 @@ public:
      * Post: returns item if found
      *
      * */
-    Object getItemByType(Name objType);
+    Object getItemByType(Name objectName);
 
     /* Remove Item:
      *
@@ -70,7 +70,7 @@ public:
      * Post: Removes the item from the inventory, returns true if removed successfully
      *
      * */
-    bool removeItem(ID objID);
+    bool removeItem(ID objectID);
 
     /* List Inventory:
      *
diff --git a/lib/Object/include/Object.h b/lib/Object/include/Object.h
index 2fe0925..8d20444 100644
--- a/lib/Object/include/Object.h
+++ b/lib/Object/include/Object.h
@@ -14,8 +14,8 @@ using AlterSpace::Value;
 
 class Object {
 private:
-    ID objID;
-    Name objType;
+    ID objectID;
+    Name objectName;
     std::unordered_map<Property, Value> abilities;
     std::vector<std::string> keywords;
     std::string shortdesc;
@@ -30,12 +30,12 @@ private:
 public:
     Object();
 
-    Object(ID objID, const Name &objType) : objID(objID), objType(objType) {}
+    Object(ID objectID, const Name &objectName) : objectID(objectID), objectName(objectName) {}
 
-    Object(ID objID, Name objType, std::unordered_map<Property, Value> abilities, std::vector<std::string> keywords, std::string shortdesc, std::vector<std::string> longdesc,
+    Object(ID objectID, Name objectName, std::unordered_map<Property, Value> abilities, std::vector<std::string> keywords, std::string shortdesc, std::vector<std::string> longdesc,
            std::vector<std::string> extraKeywords, std::vector<std::string> extraDesc) {
-        this->objID = objID;
-        this->objType = objType;
+        this->objectID = objectID;
+        this->objectName = objectName;
         this->abilities = abilities;
         this->keywords = keywords;
         this->shortdesc = shortdesc;
diff --git a/lib/Object/src/Inventory.cpp b/lib/Object/src/Inventory.cpp
index ebf6f79..23ce515 100644
--- a/lib/Object/src/Inventory.cpp
+++ b/lib/Object/src/Inventory.cpp
@@ -6,55 +6,55 @@ void Inventory::addItem(Object object) {
     objects.push_back(object);
 }
 
-auto Inventory::getItemIteratorByID(ID objID) {
+auto Inventory::getItemIteratorByID(ID objectID) {
     auto it = find_if(objects.begin(), objects.end(),
-                      [ objID ] ( Object const& obj )->bool {
-                          return obj.getID() == objID;
+                      [ objectID ] ( Object const& obj )->bool {
+                          return obj.getID() == objectID;
                         });
 
     return it;
 }
 
-bool Inventory::doesItemExist(ID objID) {
+bool Inventory::doesItemExist(ID objectID) {
 
-    return getItemIteratorByID(objID) != objects.end();
+    return getItemIteratorByID(objectID) != objects.end();
 }
 
-auto Inventory::getItemIteratorByName(Name objType) {
+auto Inventory::getItemIteratorByName(Name objectName) {
     auto it = find_if(objects.begin(), objects.end(),
-                      [ objType ] ( Object const& obj )->bool {
-                          return obj.getName() == objType;
+                      [ objectName ] ( Object const& obj )->bool {
+                          return obj.getName() == objectName;
                         });
 
     return it;
 }
 
-bool Inventory::doesItemExistByName(Name objType) {
+bool Inventory::doesItemExistByName(Name objectName) {
 
-    return getItemIteratorByName(objType) != objects.end();
+    return getItemIteratorByName(objectName) != objects.end();
 }
 
-Object Inventory::getItemByType(Name objType)
+Object Inventory::getItemByType(Name objectName)
 {
 
-    if (doesItemExistByName(objType) == false)
+    if (doesItemExistByName(objectName) == false)
     {
         return Object();
     }
 
-    auto it = getItemIteratorByName(objType);
+    auto it = getItemIteratorByName(objectName);
 
     return *it;
 }
 
-bool Inventory::removeItem(ID objID)
+bool Inventory::removeItem(ID objectID)
 {
-    auto it = getItemIteratorByID(objID);
+    auto it = getItemIteratorByID(objectID);
 
     if (it != objects.end())
     {
         it = objects.erase(it);
-        return (doesItemExist(objID) == false);
+        return (doesItemExist(objectID) == false);
     }
     return false;
 }
diff --git a/lib/Object/src/Object.cpp b/lib/Object/src/Object.cpp
index 53211f9..569fced 100644
--- a/lib/Object/src/Object.cpp
+++ b/lib/Object/src/Object.cpp
@@ -3,9 +3,9 @@
 Object::Object() = default;
 
 ID Object::getID() const {
-    return this->objID;
+    return this->objectID;
 }
 
 Name Object::getName() const {
-    return this->objType;
+    return this->objectName;
 }
diff --git a/lib/User/include/UserController.h b/lib/User/include/UserController.h
index 1d08e7c..cfb25f6 100644
--- a/lib/User/include/UserController.h
+++ b/lib/User/include/UserController.h
@@ -39,7 +39,7 @@ public:
 
     /* if username exists and isn't logged in already, logs them in and returns the outcome
      *
-     * Pre-Condition: username as const reference Name objType, password as string and a const Connection object
+     * Pre-Condition: username as const reference Name objectName, password as string and a const Connection object
      *
      * Post-Condition: a struct of username and a login result
      */
@@ -49,7 +49,7 @@ public:
 	/*
      * if no such username exists already, creates a user with such username and password
      *
-     * Pre-Condition: username as const reference Name objType, password as string and a const Connection object
+     * Pre-Condition: username as const reference Name objectName, password as string and a const Connection object
      *
      * Post-Condition: a struct of username and a user creation result
 	*/
@@ -58,7 +58,7 @@ public:
 	/*
      * logs out a username by deleting it from the map of activeUsers
      *
-     * Pre-Condition: username as const reference Name objType
+     * Pre-Condition: username as const reference Name objectName
      *
      * Post-Condition: a struct of username and a logout result
 	*/
@@ -80,7 +80,7 @@ private:
      * If a user is already logged in with such username or if the password is inaccurate, login fails
      * Password passed in is hashed for security
      *
-     * Pre-Condition: username as const reference Name objType, password as string
+     * Pre-Condition: username as const reference Name objectName, password as string
      *
      * Post-Condition: a result value of whether a user is found and validated successfully
 	*/
@@ -93,7 +93,7 @@ private:
 	 * creates a file to store the login information for the future
 	 * password is hashed for security before being stored
      *
-     * Pre-Condition: username as const reference Name objType, password as string
+     * Pre-Condition: username as const reference Name objectName, password as string
      *
      * Post-Condition: a result value of whether a new user is created succesfully
 	*/
diff --git a/patch.txt b/patch.txt
index 44e17d2..1f4640b 100644
--- a/patch.txt
+++ b/patch.txt
@@ -1,183 +0,0 @@
-diff --git a/lib/Object/include/Object.h b/lib/Object/include/Object.h
-index 3a3e37c..2fe0925 100644
---- a/lib/Object/include/Object.h
-+++ b/lib/Object/include/Object.h
-@@ -28,14 +28,10 @@ private:
-     extraDescription extra;
- 
- public:
--	Object();
-+    Object();
- 
-     Object(ID objID, const Name &objType) : objID(objID), objType(objType) {}
- 
--    //Struct not working with this constructor
--//    Object(ID objID,std::vector<std::string> keywords , std::string shortdesc,std::vector<std::string> longdesc,std::vector<std::string> extraKeywords, std::vector<std::string> extraDesc)
--//    : objID(objID),keywords(keywords),shortdesc(shortdesc),longdesc(longdesc), extra(extraKeywords),extraDescription(extraDesc){}
--
-     Object(ID objID, Name objType, std::unordered_map<Property, Value> abilities, std::vector<std::string> keywords, std::string shortdesc, std::vector<std::string> longdesc,
-            std::vector<std::string> extraKeywords, std::vector<std::string> extraDesc) {
-         this->objID = objID;
-diff --git a/lib/Utility/include/JSONObjects.h b/lib/Utility/include/JSONObjects.h
-index 038f835..883786b 100644
---- a/lib/Utility/include/JSONObjects.h
-+++ b/lib/Utility/include/JSONObjects.h
-@@ -35,91 +35,83 @@ namespace JSONObjects {
-     /*
-      * Read in a list of values for an item's specified property
-      *
--     * Pre-Condition: Name of desired property, and an indexes for where to retrieve its values from JSON
-+     * Pre-Condition: Name of desired property, and indexes for where to retrieve its values from JSON
-      *
-      * Post-Condition: Returns a list of property values
-     */
-     inline std::vector<std::string> getArray(int iObj, json j, std::string property) {
-         std::vector<std::string> values{};
- 
--        for (auto str : j[iObj][property].items()) {
--            values.push_back(str.value());
-+        for (auto& str : j[iObj][property]) {
-+            values.push_back(str);
-         }
-+        return values;
-+    }
- 
--        // int numValues = j[iObj][property].size();
-+    /*
-+     * Concatenate strings from an array
-+     *
-+     * Pre-Condition: Name of desired property, and indexes for where to retrieve its values from JSON
-+     *
-+     * Post-Condition: Returns a string of property values
-+    */
-+    inline std::string getStrFromArray(int iObj, json j, std::string property) {
-+        std::string combinedStr = std::string();
- 
--        // for (unsigned int i = 0; i < numValues; i++) {
--        //     values.push_back(j[iObj][property][i]);
--        // }
-+        for (auto& str : j[iObj][property]) {
-+            combinedStr += str;
-+        }
-+        return combinedStr;
-+    }
- 
--        return values;
-+    /*
-+     * Read in the value for a specified key
-+     *
-+     * Pre-Condition: Name of key to search for, and indexes for where to retrieve its value from JSON
-+     *
-+     * Post-Condition: Returns the key's corresponding value
-+    */
-+    inline std::string getValue(int iObj, json j, std::string key) {
-+        std::string value = std::string();
-+
-+        value += j[iObj][key];
-+
-+        return value;
-     }
- 
-     /*
-      * Read in a list of key-value pairs for an item's specified property
-      *
--     * Pre-Condition: Name of desired property, and an indexes for where to retrieve its values from JSON
-+     * Pre-Condition: Name of desired property, and indexes for where to retrieve its values from JSON
-      *
-      * Post-Condition: Returns a list of key-value pairs
-     */
-     inline std::unordered_map<std::string, std::string> getPairs(int iObj, json j, std::string property) {
-         std::unordered_map<std::string, std::string> pairs{};
-+        int numObjects = j[iObj][property].size();
- 
-         for (auto pair : j[iObj][property].items()) {
-             pairs.insert(std::pair<std::string, std::string>(pair.key(), pair.value()));
-         }
-+        return pairs;
-     }
- 
-     /*
-      * Read in a list of values for an item's specified property
-      *
--     * Pre-Condition: Name of desired (nested) property, and an indexes for where to retrieve its values from JSON
-+     * Pre-Condition: Name of desired (nested) property, and indexes for where to retrieve its values from JSON
-      *
-      * Post-Condition: Returns a list of property values
-     */
--    inline std::vector<std::string> getNestedArray(int iObj, json j, std::string arr, std::string subarr) {
-+    inline std::vector<std::string> getNestedArray(int iObj, int iSubObj, json j, std::string property, std::string subproperty) {
-         std::vector<std::string> values{};
- 
--        for (auto obj : j[iObj][arr].items()) {
--            for (auto str : j[iObj][arr][subarr]) {
--                values.push_back(str.key());
--            }
-+        for (auto& str : j[iObj][property][iSubObj][subproperty]) {
-+            values.push_back(str);
-         }
--
--        //int sizeArr = j[iObj][arr].size();
--        //
--        // for (unsigned int iArr = 0; iArr < sizeArr; iArr++) {
--        //     int sizeSubarray = j[iObj][property][iArr][subproperty].size();
--
--        //     for (unsigned int iSubarr = 0; iSubarr < sizeSubarray; iSubarr++) {
--        //         values.push_back(j[iObj][property][iArr][subproperty][iSubarr].get<std::string>());
--        //     }
--        // }
-         return values;
-     }
- 
--    /*
--     * Concatenate strings from an array
--     *
--     * Pre-Condition: Name of desired property, and an indexes for where to retrieve its values from JSON
--     *
--     * Post-Condition: Returns a string of property values
--    */
--    inline std::string getStrFromArray(int iObj, json j, std::string property) {
--        std::string combinedStr = std::string();
--
--        for (auto str : j[iObj][property].items()) {
--            combinedStr += str.key();
--        }
--
--        // int numValues = j[iObj][property].size();
--
--        // for (unsigned int i = 0; i < numValues; i++) {
--        //     combinedStr += j[iObj][property][i];
--        // }
--        return combinedStr;
--    }
--
-     /*
-      * Read in a list of objects from a specified JSON file
-      *
-@@ -129,12 +121,9 @@ namespace JSONObjects {
-     */
-     static std::vector<Object> getObjects(const std::string &name) {
-         json j = setupRead(name);
--        std::cout << "read json" << std::endl;
-         std::vector<Object> objects{};
--        std::cout << "initialized object vector" << std::endl;
- 
-         int numObjects = j["OBJECTS"].size();
--        std::cout << "number of objects: " << numObjects << std::endl;
-         j = j["OBJECTS"];
- 
-         for (unsigned int i = 0; i < numObjects; i++) {
-@@ -142,11 +131,10 @@ namespace JSONObjects {
-                        getStrFromArray(i, j, "keywords"),
-                        getPairs(i, j, "abilities"),
-                        getArray(i, j, "keywords"),
--                       j[i]["shortdesc"],
-+                       getValue(i, j, "shortdesc"),
-                        getArray(i, j, "longdesc"),
--                       getNestedArray(i, j, "extra", "keywords"),
--                       getNestedArray(i, j, "extra", "desc"));
--            std::cout << "Created object " << i << std::endl;
-+                       getNestedArray(i, 0, j, "extra", "keywords"),
-+                       getNestedArray(i, 0, j, "extra", "desc"));
- 
-             objects.push_back(obj);
-         }
